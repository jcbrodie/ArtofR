UniGene <- read.delim("~/THESIS/UniGene.annotation", dec=",")
UniGene <- read.delim("~/THESIS/UniGene.annotation", dec=",")
View(UniGene)
install.packages("ape")
install.packages("phytools")
library(ape)
library(phytools)
row.names(UniGene) <- NULL
UG_clean <- UniGene[UniGene$Rank_NR != "-", ]
individuals <- split(UG_clean,UG_clean$Assembly_source)
str(individuals)
levels(UG_clean$Assembly_source)
length(levels(UG_clean$Assembly_source))
is(levels(UG_clean$Assembly_source))
Y <- lapply(seq_along(individuals), function(x) as.data.frame(X[[x]])[, 1:2])
lapply(seq_along(Y), function(x) {
assign(c(levels(UG_clean$Assembly_source))[x], Y[[x]], envir=.GlobalEnv)
}
)
Y <- lapply(seq_along(individuals), function(x) as.data.frame(individuals[[x]])[, 1:2])
lapply(seq_along(Y), function(x) {
assign(c(levels(UG_clean$Assembly_source))[x], Y[[x]], envir=.GlobalEnv)
}
)
View(`V1.CD-2`)
Y <- lapply(seq_along(individuals), function(x) as.data.frame(individuals[[x]])[, c(1:2, 9:12)])
lapply(seq_along(Y), function(x) {
assign(c(levels(UG_clean$Assembly_source))[x], Y[[x]], envir=.GlobalEnv)
}
)
View(`V1.UC-15`)
MH0001$no_rank1 = as.factor(unlist(lapply(MH0001$Full_lineage_NR, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][1])))
MH0001$no_rank2 = as.factor(unlist(lapply(MH0001$Full_lineage_NR, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][2])))
MH0001$superkingdom = as.factor(unlist(lapply(MH0001$Full_lineage_NR, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][3])))
MH0001$phylum = as.factor(unlist(lapply(MH0001$Full_lineage_NR, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][4])))
MH0001$class = as.factor(unlist(lapply(MH0001$Full_lineage_NR, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][5])))
MH0001$order = as.factor(unlist(lapply(MH0001$Full_lineage_NR, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][6])))
MH0001$family = as.factor(unlist(lapply(MH0001$Full_lineage_NR, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][7])))
MH0001$genus = as.factor(unlist(lapply(MH0001$Full_lineage_NR, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][8])))
MH0001$species = as.factor(unlist(lapply(MH0001$Full_lineage_NR, function (x) strsplit(as.character(x), ",", fixed=TRUE)[[1]][9])))
View(MH0001)
View(MH0001)
UniGene$no_rank1 <- 0
UniGene$no_rank2 <- 0
UniGene$superkingdom <- 0
UniGene$phylum <- 0
UniGene$class <- 0
UniGene$order <- 0
UniGene$family <- 0
UniGene$genus <- 0
UniGene$species <- 0
UG_clean <- UniGene[UniGene$Rank_NR != "-", ]
row.names(UG_clean) <- NULL
individuals <- split(UG_clean,UG_clean$Assembly_source)
Y <- lapply(seq_along(individuals), function(x) as.data.frame(individuals[[x]])[, c(1:2, 9:12)])
lapply(seq_along(Y), function(x) {
assign(c(levels(UG_clean$Assembly_source))[x], Y[[x]], envir=.GlobalEnv)
}
)
full_individuals <- split(UniGene,UniGene$Assembly_source)
str(full_individuals)
Z <- lapply(seq_along(full_individuals), function(x) as.data.frame(full_individuals[[x]])[,])
lapply(seq_along(Z), function(x) {
assign(c(levels(UG_clean$Assembly_source))[x], Z[[x]], envir=.GlobalEnv)
}
)
View(MH0001)
lapply(seq_along(Z), function(x) write.table( Z[[x]] , file = c(UniGene$Assembly_source, "_1.txt")))
install.packages("plyr")
write.table(MH0001, file="MH0001_1.txt")
fnames <- paste("a_",levels(UniGene$Assembly_source), sep="")
fnames <- paste("a_",levels(UniGene$Assembly_source), ".txt", sep="")
fnames <- paste(levels(UniGene$Assembly_source), "_1.txt", sep="")
lapply(seq_along(Z), function(x) write.table(x, file=fnames[x]))
lapply(seq_along(Z), function(x) write.table( Z[[x]], file=fnames[x]))
lapply(seq_along(Z), function(x) write.table( Z[[x]], file=fnames[x], sep="\t"))
install.packages("shiny")
library(shiny)
runExampl("01_hello")
runExample("01_hello")
x <- 1:10
if (x>5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y+z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if (x < 3) {
NA
} else {
10
}
y
rm(y)
x <- 5
y <- if (x < 3) {
NA
} else {
10
}
rm(x, y, z)
rm(f)
h <- function(x, y=NULL, d=3L){
z <- cbind(x, d)
if (!is.null(y))
z <- z+y
else
z < z+ f
g <- x + y / z
if (d == 3L)
return (g)
g <- g+10
g
}
h(2)
rnorm(10)
rnorm(10)
getwd()
setwd('C:\Users\Jane\Documents\Personal\ArtofR')
setwd('C:\\Users\\Jane\\Documents\\Personal\\ArtofR')
getwd()
pdf("xh.pdf") #set graphical output file
hist(rnorm(100)) #generate 100 N(0,1) variants and plot their histogram
dev.off() #close the graphical output file
x <- c(1,2,4)
q <- c(x,x,8)
x[3]
x[2:3]
mean(x)
sd(x)
data()
mean(Nile)
sd(Nile)
hist(Nile)
# counts the number of odd integers in x
oddcount <- function(x) {
k <- 0 # assign 0 to k
for (n in x) {
if (n %% 2 == 1) k <- k+1  # %% is the modulo operator
}
return(k)
}
oddcount(c(1,3,5))
oddcount(c(1,2,3,7,9))
38 %% 7
z <- c(2,6,7)
oddcount(z)
f <- function(x) return (x+y)
y <-3
f(5)
x <- c(5, 12, 13)
x
length(x)
mode(x)
y <- "abc"
y
length(y)
mode(y)
z <- c("abc", "29 88")
length(z)
mode(z)
u <- paste("abc", "de", "f")  #concatenate the strings
u
v <- strsplit(u, " ")
v
